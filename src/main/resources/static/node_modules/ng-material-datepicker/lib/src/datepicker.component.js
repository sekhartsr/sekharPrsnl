"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var calendar_1 = require("./calendar");
var DatepickerComponent = (function () {
    function DatepickerComponent(renderer, elementRef) {
        var _this = this;
        this.renderer = renderer;
        this.elementRef = elementRef;
        // two way bindings
        this.dateChange = new core_1.EventEmitter();
        // data
        this.placeholder = 'Select a date';
        // events
        this.onSelect = new core_1.EventEmitter();
        this.hoveredYear = null;
        this.hoveredMonth = null;
        // Show div for years
        this.showYear = false;
        this.showMonths = false;
        this.dateFormat = 'YYYY-MM-DD';
        // view logic
        this.showCalendar = false;
        // colors
        this.colors = {
            'black': '#333333',
            'blue': '#1285bf',
            'lightGrey': '#f1f1f1',
            'darkGrey': '#A9A9A9',
            'white': '#ffffff'
        };
        this.accentColor = this.colors['blue'];
        this.altInputStyle = false;
        // time
        this.calendar = new calendar_1.Calendar();
        this.dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        this.calendarYearRange = {
            '1970-1989': [1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989],
            '1990-2009': [1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009],
            '2010-2029': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029],
            '2030-2049': [2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049],
            '2050-2069': [2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069],
            '2070-2089': [2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089],
            '2090-2109': [2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109]
        };
        this.months = [
            'January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', ' December'
        ];
        this.monthsList = [
            { name: 'Jan', value: 0 },
            { name: 'Feb', value: 1 },
            { name: 'Mar', value: 2 },
            { name: 'Apr', value: 3 },
            { name: 'May', value: 4 },
            { name: 'Jun', value: 5 },
            { name: 'Jul', value: 6 },
            { name: 'Aug', value: 7 },
            { name: 'Sep', value: 8 },
            { name: 'Oct', value: 9 },
            { name: 'Nov', value: 10 },
            { name: 'Dec', value: 11 }
        ];
        // listeners
        this.clickListener = renderer.listenGlobal('document', 'click', function (event) { return _this.handleGlobalClick(event); });
        // form controls
        this.yearControl = new forms_1.FormControl('', forms_1.Validators.compose([
            forms_1.Validators.required,
            forms_1.Validators.maxLength(4),
            this.yearValidator,
            this.inRangeValidator.bind(this)
        ]));
    }
    Object.defineProperty(DatepickerComponent.prototype, "date", {
        get: function () { return this.dateVal; },
        set: function (val) {
            this.dateVal = val;
            this.dateChange.emit(val);
        },
        enumerable: true,
        configurable: true
    });
    ;
    DatepickerComponent.prototype.ngOnInit = function () {
        if ((this.rangeStart && this.rangeEnd) && this.rangeStart > this.rangeEnd) {
            throw new Error("\n      Error => [rangeStart] > [rangeEnd]\n       \n      rangeStart cannot be greater than rangeEnd");
        }
        this.syncVisualsWithDate();
    };
    DatepickerComponent.prototype.ngOnChanges = function (changes) {
        if ((changes['date'] || changes['dateFormat'])) {
            this.syncVisualsWithDate();
        }
    };
    DatepickerComponent.prototype.ngOnDestroy = function () {
        this.clickListener();
    };
    // -------------------------------------------------------------------------------- //
    // -------------------------------- State Management ------------------------------ //
    // -------------------------------------------------------------------------------- //
    /**
    * Closes the calendar and syncs visual components with selected or current date.
    * This way if a user opens the calendar with this month, scrolls to two months from now,
    * closes the calendar, then reopens it, it will open with the current month
    * or month associated with the selected date
    */
    DatepickerComponent.prototype.closeCalendar = function () {
        this.showCalendar = false;
        this.syncVisualsWithDate();
    };
    /**
    * Sets the date values associated with the ui
    */
    DatepickerComponent.prototype.setCurrentValues = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentMonth = this.months[this.currentMonthNumber];
        this.currentYear = date.getFullYear();
        this.yearControl.setValue(this.currentYear);
        var calendarArray = this.calendar.monthDays(this.currentYear, this.currentMonthNumber);
        this.calendarDays = [].concat.apply([], calendarArray);
    };
    /**
    * Visually syncs calendar and input to selected date or current day
    */
    DatepickerComponent.prototype.syncVisualsWithDate = function () {
        if (this.date) {
            this.setInputText(this.date);
            this.setCurrentValues(this.date);
        }
        else {
            this.inputText = '';
            this.setCurrentValues(new Date());
        }
    };
    /**
    * Sets the currentMonth and creates new calendar days for the given month
    */
    DatepickerComponent.prototype.setCurrentMonth = function (monthNumber) {
        this.currentMonth = this.months[monthNumber];
        var calendarArray = this.calendar.monthDays(this.currentYear, this.currentMonthNumber);
        this.calendarDays = [].concat.apply([], calendarArray);
    };
    /**
    * Sets the currentYear and FormControl value associated with the year
    */
    DatepickerComponent.prototype.setCurrentYear = function (year) {
        this.currentYear = year;
        this.yearControl.setValue(year);
    };
    /**
    * Sets the visible input text
    */
    DatepickerComponent.prototype.setInputText = function (date) {
        var month = (date.getMonth() + 1).toString();
        // always prefixes one digit numbers with a 0
        if (month.length < 2) {
            month = "0" + month;
        }
        var day = (date.getDate()).toString();
        if (day.length < 2) {
            day = "0" + day;
        }
        // transforms input text into appropiate date format
        var inputText = '';
        var dateFormat = this.dateFormat;
        if (typeof dateFormat === 'string') {
            switch (dateFormat.toUpperCase()) {
                case 'YYYY-MM-DD':
                    inputText = date.getFullYear() + "/" + month + "/" + day;
                    break;
                case 'MM-DD-YYYY':
                    inputText = month + "/" + day + "/" + date.getFullYear();
                    break;
                case 'DD-MM-YYYY':
                    inputText = day + "/" + month + "/" + date.getFullYear();
                    break;
                default:
                    inputText = date.getFullYear() + "/" + month + "/" + day;
                    break;
            }
        }
        else if (typeof dateFormat === 'function') {
            inputText = dateFormat(date);
        }
        this.inputText = inputText;
    };
    /**
     * Show or hide the list of years
     */
    DatepickerComponent.prototype.showYearDiv = function () {
        var _this = this;
        this.showYear = !this.showYear;
        Object.keys(this.calendarYearRange)
            .map(function (eachRange) {
            if (_this.calendarYearRange[eachRange].indexOf(_this.currentYear) >= 0) {
                _this.calendarYears = _this.calendarYearRange[eachRange];
                _this.selectedYearRange = eachRange;
            }
        });
    };
    /**
     * Sets the currentMonth and creates new calendar days for the given month
     */
    DatepickerComponent.prototype.selectMonth = function (monthId) {
        var _this = this;
        this.currentMonthNumber = monthId;
        this.setCurrentMonth(monthId);
        setTimeout(function () { return _this.showMonths = !_this.showMonths; });
    };
    /**
     * Show or hide the list of Months
     */
    DatepickerComponent.prototype.showMonthsDiv = function () {
        this.showMonths = !this.showMonths;
    };
    // -------------------------------------------------------------------------------- //
    // --------------------------------- Click Handlers ------------------------------- //
    // -------------------------------------------------------------------------------- //
    /**
    * Sets the date values associated with the calendar.
    * Triggers animation if the month changes
    */
    DatepickerComponent.prototype.onArrowClick = function (direction) {
        var currentMonth = this.currentMonthNumber;
        var newYear = this.currentYear;
        var newMonth;
        // sets the newMonth
        // changes newYear is necessary
        if (direction === 'left') {
            if (currentMonth === 0) {
                newYear = this.currentYear - 1;
                newMonth = 11;
            }
            else {
                newMonth = currentMonth - 1;
            }
        }
        else if (direction === 'right') {
            if (currentMonth === 11) {
                newYear = this.currentYear + 1;
                newMonth = 0;
            }
            else {
                newMonth = currentMonth + 1;
            }
        }
        // check if new date would be within range
        var newDateValid;
        if (direction === 'left') {
            newDateValid = !this.rangeStart || (new Date(newYear, newMonth, this.rangeStart.getDate() + 1)) >= this.rangeStart;
        }
        else if (direction === 'right') {
            newDateValid = !this.rangeEnd || (new Date(newYear, newMonth, this.rangeEnd.getDate())) <= this.rangeEnd;
        }
        if (newDateValid) {
            this.setCurrentYear(newYear);
            this.currentMonthNumber = newMonth;
            this.setCurrentMonth(newMonth);
            this.triggerAnimation(direction);
        }
    };
    /**
    * Sets the date values associated with the calendar.
    * Triggers animation if the year changes
    */
    DatepickerComponent.prototype.changeYear = function (direction) {
        if (direction === 'left') {
            if (this.currentYear !== 1970) {
                this.currentYear = this.currentYear - 1;
            }
        }
        else if (direction === 'right') {
            if (this.currentYear !== 2109) {
                this.currentYear = this.currentYear + 1;
            }
        }
        this.setCurrentYear(this.currentYear);
    };
    /**
    * Closes the calendar when the cancel button is clicked
    */
    DatepickerComponent.prototype.onCancel = function () {
        this.closeCalendar();
    };
    /**
    * Toggles the calendar when the date input is clicked
    */
    DatepickerComponent.prototype.onInputClick = function () {
        this.showCalendar = !this.showCalendar;
    };
    /**
    * Returns the font color for a day
    */
    DatepickerComponent.prototype.onSelectDay = function (day) {
        this.date = day;
        this.onSelect.emit(day);
        this.showCalendar = !this.showCalendar;
    };
    /**
    * Sets the current year and current month if the year from
    * yearControl is valid
    */
    DatepickerComponent.prototype.onYearSubmit = function () {
        if (this.yearControl.valid && +this.yearControl.value !== this.currentYear) {
            this.setCurrentYear(+this.yearControl.value);
            this.setCurrentMonth(this.currentMonthNumber);
        }
        else {
            this.yearControl.setValue(this.currentYear);
        }
    };
    /**
     * Update calendar on year selection
     */
    DatepickerComponent.prototype.selectYear = function (year) {
        var _this = this;
        this.currentYear = year;
        this.setCurrentMonth(this.currentMonthNumber);
        setTimeout(function () { return _this.showYear = false; });
    };
    /**
     * Sets the date values associated with the calendar.
     * Triggers animation if the year changes
     */
    DatepickerComponent.prototype.changeYearList = function (direction) {
        var newYearRange;
        if (direction === 'left') {
            newYearRange = +(this.selectedYearRange.split('-'))[0] - 20 + "-" + (+(this.selectedYearRange.split('-'))[0] - 1);
            if (newYearRange in this.calendarYearRange) {
                this.triggerAnimation(direction);
                this.selectedYearRange = newYearRange;
                this.calendarYears = this.calendarYearRange[newYearRange];
            }
        }
        else if (direction === 'right') {
            newYearRange = +(this.selectedYearRange.split('-'))[1] + 1 + "-" + (+(this.selectedYearRange.split('-'))[1] + 20);
            if (newYearRange in this.calendarYearRange) {
                this.triggerAnimation(direction);
                this.selectedYearRange = newYearRange;
                this.calendarYears = this.calendarYearRange[newYearRange];
            }
        }
    };
    // -------------------------------------------------------------------------------- //
    // ----------------------------------- Listeners ---------------------------------- //
    // -------------------------------------------------------------------------------- //
    /**
    * Closes the calendar if a click is not within the datepicker component
    */
    DatepickerComponent.prototype.handleGlobalClick = function (event) {
        var withinElement = this.elementRef.nativeElement.contains(event.target);
        if (!this.elementRef.nativeElement.contains(event.target)) {
            this.closeCalendar();
        }
    };
    // -------------------------------------------------------------------------------- //
    // ----------------------------------- Helpers ------------------------------------ //
    // -------------------------------------------------------------------------------- //
    /**
    * Returns the background color for a day
    */
    DatepickerComponent.prototype.getDayBackgroundColor = function (day) {
        var color = this.colors['white'];
        if (this.isChosenDay(day)) {
            color = this.accentColor;
        }
        else if (this.isCurrentDay(day)) {
            color = this.colors['lightGrey'];
        }
        return color;
    };
    /**
     * Returns the background color for a year
     */
    DatepickerComponent.prototype.getYearBackgroundColor = function (year) {
        var color = this.colors['white'];
        if (this.date && this.date.getFullYear() === year) {
            color = this.accentColor;
        }
        else if (year === (new Date()).getUTCFullYear()) {
            color = this.colors['lightGrey'];
        }
        return color;
    };
    /**
     * Returns the background color for a month
     */
    DatepickerComponent.prototype.getMonthBackgroundColor = function (month) {
        var color = this.colors['white'];
        if (this.currentMonthNumber === month && this.date && this.currentYear === this.date.getFullYear()) {
            color = this.accentColor;
        }
        else if (month === (new Date()).getMonth() && this.currentYear === (new Date()).getUTCFullYear()) {
            color = this.colors['lightGrey'];
        }
        return color;
    };
    /**
    * Returns the font color for a day
    */
    DatepickerComponent.prototype.getDayFontColor = function (day) {
        var color = this.colors['black'];
        if (this.isChosenDay(day)) {
            color = this.colors['white'];
        }
        else if (!this.isSelectableDate(day)) {
            color = this.colors['darkGrey'];
        }
        return color;
    };
    /**
    * Returns the day is between rangeStart and rangeEnd
    */
    DatepickerComponent.prototype.isSelectableDate = function (day) {
        if (this.rangeStart && this.rangeEnd) {
            return (day >= this.rangeStart && day <= this.rangeEnd);
        }
        else if (this.rangeStart) {
            return (day >= this.rangeStart);
        }
        else if (this.rangeEnd) {
            return (day <= this.rangeEnd);
        }
        return true;
    };
    /**
     * Returns the font color for a year
     */
    DatepickerComponent.prototype.getYearFontColor = function (year) {
        var color = this.colors['black'];
        if (this.date && this.date.getFullYear() === year) {
            color = this.colors['white'];
        }
        return color;
    };
    /**
     * Returns the font color for a month
     */
    DatepickerComponent.prototype.getMonthFontColor = function (month) {
        var color = this.colors['black'];
        if (month === this.currentMonthNumber && this.date && this.currentYear === this.date.getFullYear()) {
            color = this.colors['white'];
        }
        return color;
    };
    /**
    * Returns whether a day is the chosen day
    */
    DatepickerComponent.prototype.isChosenDay = function (day) {
        if (day) {
            return this.date ? day.toDateString() === this.date.toDateString() : false;
        }
        else {
            return false;
        }
    };
    /**
    * Returns whether a day is the current calendar day
    */
    DatepickerComponent.prototype.isCurrentDay = function (day) {
        if (day) {
            return day.toDateString() === new Date().toDateString();
        }
        else {
            return false;
        }
    };
    /**
    * Returns whether a day is the day currently being hovered
    */
    DatepickerComponent.prototype.isHoveredDay = function (day) {
        return this.hoveredDay ? this.hoveredDay === day && !this.isChosenDay(day) && this.isSelectableDate(day) : false;
    };
    /**
     * Returns whether a year is the year currently being hovered
     */
    DatepickerComponent.prototype.isHoveredYear = function (year) {
        return this.hoveredYear ? (this.hoveredYear === year) && !(this.currentYear === year) : false;
    };
    /**
     * Returns whether a year is the year currently being hovered
     */
    DatepickerComponent.prototype.isHoveredMonth = function (month) {
        return this.hoveredMonth ? (this.hoveredMonth === month) && !(this.currentMonthNumber === month) : false;
    };
    /**
    * Triggers an animation and resets to initial state after the duration of the animation
    */
    DatepickerComponent.prototype.triggerAnimation = function (direction) {
        var _this = this;
        this.animate = direction;
        setTimeout(function () { return _this.animate = 'reset'; }, 185);
    };
    // -------------------------------------------------------------------------------- //
    // ---------------------------------- Validators ---------------------------------- //
    // -------------------------------------------------------------------------------- //
    /**
    * Validates that a value is within the 'rangeStart' and/or 'rangeEnd' if specified
    */
    DatepickerComponent.prototype.inRangeValidator = function (control) {
        var value = control.value;
        if (this.currentMonthNumber) {
            var tentativeDate = new Date(+value, this.currentMonthNumber);
            if (this.rangeStart && tentativeDate.getTime() < this.rangeStart.getTime()) {
                return { 'yearBeforeRangeStart': true };
            }
            if (this.rangeEnd && tentativeDate.getTime() > this.rangeEnd.getTime()) {
                return { 'yearAfterRangeEnd': true };
            }
            return null;
        }
        return { 'currentMonthMissing': true };
    };
    /**
    * Validates that a value is a number greater than or equal to 1970
    */
    DatepickerComponent.prototype.yearValidator = function (control) {
        var value = control.value;
        var valid = !isNaN(value) && value >= 1970 && Math.floor(value) === +value;
        if (valid) {
            return null;
        }
        return { 'invalidYear': true };
    };
    return DatepickerComponent;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DatepickerComponent.prototype, "dateChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date),
    __metadata("design:paramtypes", [Date])
], DatepickerComponent.prototype, "date", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DatepickerComponent.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatepickerComponent.prototype, "accentColor", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DatepickerComponent.prototype, "altInputStyle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DatepickerComponent.prototype, "dateFormat", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatepickerComponent.prototype, "fontFamily", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date)
], DatepickerComponent.prototype, "rangeStart", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date)
], DatepickerComponent.prototype, "rangeEnd", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatepickerComponent.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatepickerComponent.prototype, "inputText", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DatepickerComponent.prototype, "showCalendar", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DatepickerComponent.prototype, "onSelect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DatepickerComponent.prototype, "calendarDays", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatepickerComponent.prototype, "currentMonth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DatepickerComponent.prototype, "dayNames", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Date)
], DatepickerComponent.prototype, "hoveredDay", void 0);
DatepickerComponent = __decorate([
    core_1.Component({
        selector: 'material-datepicker',
        animations: [
            core_1.trigger('calendarAnimation', [
                core_1.transition('* => left', [
                    core_1.animate(180, core_1.keyframes([
                        core_1.style({ transform: 'translateX(105%)', offset: 0.5 }),
                        core_1.style({ transform: 'translateX(-130%)', offset: 0.51 }),
                        core_1.style({ transform: 'translateX(0)', offset: 1 })
                    ]))
                ]),
                core_1.transition('* => right', [
                    core_1.animate(180, core_1.keyframes([
                        core_1.style({ transform: 'translateX(-105%)', offset: 0.5 }),
                        core_1.style({ transform: 'translateX(130%)', offset: 0.51 }),
                        core_1.style({ transform: 'translateX(0)', offset: 1 })
                    ]))
                ])
            ])
        ],
        styles: [
            ".datepicker {\n        position: relative;\n        display: inline-block;\n        color: #2b2b2b;\n        font-family: 'Helvetica Neue', 'Helvetica', 'Arial', 'Calibri', 'Roboto';\n      }\n\n      .datepicker__calendar {\n        position: absolute;\n        overflow: hidden;\n        z-index: 1000;\n        top: 1.9em;\n        left: 0;\n        height: 23.8em;\n        width: 20.5em;\n        font-size: 14px;\n        background-color: #ffffff;\n        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n        cursor: default;\n        -webkit-touch-callout: none;\n          -webkit-user-select: none;\n             -moz-user-select: none;\n              -ms-user-select: none;\n                  user-select: none;\n      }\n      \n      .datepicker__calendar__inner {\n        position: absolute;\n        overflow: hidden;\n        z-index: 1000;\n        top: 0;\n        left: 0;\n        height: 23.8em;\n        width: 20.5em;\n        font-size: 14px;\n        background-color: #ffffff;\n        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\n        cursor: default;\n        -webkit-touch-callout: none;\n          -webkit-user-select: none;\n             -moz-user-select: none;\n              -ms-user-select: none;\n                  user-select: none;\n      }\n\n      .datepicker__calendar__cancel {\n        position: absolute;\n        bottom: 1em;\n        left: 1.8em;\n        color: #d8d8d8;\n        cursor: pointer;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n\n      .datepicker__calendar__cancel:hover {\n        color: #b1b1b1;\n      }\n\n      .datepicker__calendar__content {\n        margin-top: 0.4em;\n      }\n\n      .datepicker__calendar__labels {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: center;\n           -ms-flex-pack: center;\n         justify-content: center;\n        width: 100%;\n      }\n\n      .datepicker__calendar__label {\n        display: inline-block;\n        width: 2.2em;\n        height: 2.2em;\n        margin: 0 0.2em;\n        line-height: 2.2em;\n        text-align: center;\n        color: #d8d8d8;\n      }\n\n      .datepicker__calendar__month {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-flow: wrap;\n            flex-flow: wrap;\n        -webkit-box-pack: center;\n           -ms-flex-pack: center;\n         justify-content: center;\n      }\n\n      .datepicker__calendar__month__day {\n        display: inline-block;\n        width: 2.2em;\n        height: 2.2em;\n        margin: 0 0.2em 0.4em;\n        border-radius: 2.2em;\n        line-height: 2.2em;\n        text-align: center;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n\n      .datepicker__calendar__nav {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: center;\n           -ms-flex-pack: center;\n         justify-content: center;\n        -webkit-box-align: center;\n           -ms-flex-align: center;\n              align-items: center;\n        height: 3em;\n        background-color: #fff;\n        border-bottom: 1px solid #e8e8e8;\n      }\n\n      .datepicker__calendar__nav__arrow {\n        width: 0.8em;\n        height: 0.8em;\n        cursor: pointer;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n\n      .datepicker__calendar__nav__arrow:hover {\n        -webkit-transform: scale(1.05);\n                transform: scale(1.05);\n      }\n\n      .datepicker__calendar__nav__chevron {\n        fill: #bbbbbb;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n\n      .datepicker__calendar__nav__chevron:hover {\n        fill: #2b2b2b;\n      }\n\n      .datepicker__calendar__nav__header {\n        width: 11em;\n        cursor: pointer;\n        margin: 0 1em;\n        text-align: center;\n      }\n\n      .datepicker__calendar__nav__header__form {\n        display: inline-block;\n        margin: 0;\n      }\n\n      .datepicker__calendar__nav__header__year {\n        display: inline-block;\n        width: 3em;\n        padding: 2px 4px;\n        border: 1px solid #ffffff;\n        border-radius: 2px;\n        font-size: 1em;\n        transition: 0.32s;\n      }\n      \n      .datepicker__calendar__nav__header__inner__year {\n        width: 11em;\n        margin: 0 1em;\n        text-align: center;\n      }\n      \n      .datepicker__calendar__nav__header__inner__year.pointer {\n        cursor: pointer;\n      }\n\n      .datepicker__calendar__nav__header__year:focus.ng-invalid {\n        border: 1px solid #e82525;\n      }\n\n      .datepicker__calendar__nav__header__year:focus.ng-valid {\n        border: 1px solid #13ad13;\n      }\n\n      .datepicker__calendar__nav__header__year:focus {\n        outline: none;\n      }\n\n      .datepicker__input {\n        outline: none;\n        border-radius: 0.1rem;\n        padding: .2em .6em;\n        font-size: 14px;\n      }\n                 \n      .grid {\n        background: white;\n        margin: 0 0 20px 0;\n        padding-right: 0;\n      }\n        \n      .grid:after {\n        content: \"\";\n        display: table;\n        clear: both;\n      }\n      \n      .grid:last-of-type {\n        padding-right: 0;\n      }\n      \n      [class*='col-'] {\n        float: left;\n        padding-right: 20px;\n      }\n      \n      .col-1-5 {\n        width: calc(20% - 10px);\n        padding: 5px;\n      }\n      \n      .col-1-4 {\n        width: calc(25% - 10px);\n        padding: 5px;\n      }\n      \n      .col-1-5 .year {\n        cursor: pointer;\n        border: 0;\n        border-radius: 50%;\n        background: white;\n        color: black;\n        display: table;\n        height: 49px;\n        width: 100%;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n      \n      .col-1-4 .month {\n        cursor: pointer;\n        border: 0;\n        border-radius: 50%;\n        background: white;\n        color: black;\n        display: table;\n        height: 60px;\n        width: 100%;\n        -webkit-transition: 0.37s;\n        transition: 0.37s;\n      }\n      \n      .col-1-5 .year span {\n        display:table-cell;\n        vertical-align: middle;\n        text-align: center;\n      }\n      \n      .col-1-4 .month span {\n        display:table-cell;\n        vertical-align: middle;\n        text-align: center;\n      }\n    "
        ],
        template: "\n    <div class=\"datepicker\" [ngStyle]=\"{'font-family': fontFamily}\">\n      <input [disabled]=\"disabled\"\n        class=\"datepicker__input\"\n        [placeholder]=\"placeholder\"\n        [ngStyle]=\"{'color': altInputStyle ? colors['white'] : colors['black'],\n                    'background-color': altInputStyle ? accentColor : colors['white'],\n                    'border': altInputStyle ? '' : '1px solid #dadada'}\"\n        (click)=\"onInputClick()\"\n        [(ngModel)]=\"inputText\"\n        readonly=\"true\">\n      <div class=\"datepicker__calendar\" *ngIf=\"showCalendar\">\n        <div class=\"datepicker__calendar__nav\">\n          <div class=\"datepicker__calendar__nav__arrow\" (click)=\"onArrowClick('left')\" >\n            <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n              <g>\n                <path d=\"M39.7,7.1c0.5,0.5,0.5,1.2,0,1.7L29,19.6c-0.5,0.5-1.2,1.2-1.7,1.7L16.5,32.1c-0.5,0.5-1.2,0.5-1.7,0l-2.3-2.3\n                      c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-0.5-1.2,0-1.7l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7L31.7,0.8c0.5-0.5,1.2-0.5,1.7,0\n                      l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L39.7,7.1z\"/>\n              </g>\n              <g>\n                <path d=\"M33.4,49c-0.5,0.5-1.2,0.5-1.7,0L20.9,38.2c-0.5-0.5-1.2-1.2-1.7-1.7L8.4,25.7c-0.5-0.5-0.5-1.2,0-1.7l2.3-2.3\n                      c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,1.2-0.5,1.7,0l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,0.5,1.2,0,1.7\n                      L37.4,45c-0.5,0.5-1.2,1.2-1.7,1.7L33.4,49z\"/>\n              </g>\n            </svg>\n          </div>\n          <div (click)=\"showMonthsDiv()\" class=\"datepicker__calendar__nav__header\">\n            <span>{{ currentMonth }}</span>\n            <span>{{ currentYear }}</span>\n          </div>\n          <div class=\"datepicker__calendar__nav__arrow\" (click)=\"onArrowClick('right')\" >\n            <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n              <g>\n                <path d=\"M8.4,7.1c-0.5,0.5-0.5,1.2,0,1.7l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,1.2,0.5,1.7,0l2.3-2.3\n                    c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,0.5-1.2,0-1.7L29,13.2c-0.5-0.5-1.2-1.2-1.7-1.7L16.5,0.8c-0.5-0.5-1.2-0.5-1.7,0\n                    l-2.3,2.3c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,7.1z\"/>\n              </g>\n              <g>\n                <path d=\"M14.8,49c0.5,0.5,1.2,0.5,1.7,0l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7l10.8-10.8c0.5-0.5,0.5-1.2,0-1.7l-2.3-2.3\n                    c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-1.2-0.5-1.7,0L20.9,28.5c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,40.9c-0.5,0.5-0.5,1.2,0,1.7\n                    l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L14.8,49z\"/>\n              </g>\n            </svg>\n          </div>\n        </div>\n        <div class=\"datepicker__calendar__content\" >\n          <div class=\"datepicker__calendar__labels\">\n            <div class=\"datepicker__calendar__label\" *ngFor=\"let day of dayNames\" >{{ day }}</div>\n          </div>\n          <div [@calendarAnimation]=\"animate\" class=\"datepicker__calendar__month\">\n            <div\n              *ngFor=\"let day of calendarDays\"\n              class=\"datepicker__calendar__month__day\"\n              [ngStyle]=\"{'cursor': day == 0 || !isSelectableDate(day) ? 'initial' : 'pointer',\n                          'background-color': getDayBackgroundColor(day),\n                          'color': isHoveredDay(day) ? accentColor : getDayFontColor(day),\n                          'pointer-events': day == 0 || !isSelectableDate(day) ? 'none' : ''\n                          }\"\n              (click)=\"onSelectDay(day)\"\n              (mouseenter)=\"hoveredDay = day\"\n              (mouseleave)=\"hoveredDay = null\">\n              <span *ngIf=\"day != 0\">\n                {{ day.getDate() }}\n              </span>\n            </div>\n          </div>\n          <div class=\"datepicker__calendar__cancel\" (click)=\"onCancel()\" >Cancel</div>\n        </div>\n                \n        <div *ngIf=\"showMonths\" class=\"datepicker__calendar__inner\">\n        \n          <div class=\"datepicker__calendar__nav\">\n            \n            <div class=\"datepicker__calendar__nav__arrow\" (click)=\"changeYear('left')\" >\n              <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n                <g>\n                  <path d=\"M39.7,7.1c0.5,0.5,0.5,1.2,0,1.7L29,19.6c-0.5,0.5-1.2,1.2-1.7,1.7L16.5,32.1c-0.5,0.5-1.2,0.5-1.7,0l-2.3-2.3\n                        c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-0.5-1.2,0-1.7l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7L31.7,0.8c0.5-0.5,1.2-0.5,1.7,0\n                        l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L39.7,7.1z\"/>\n                </g>\n                <g>\n                  <path d=\"M33.4,49c-0.5,0.5-1.2,0.5-1.7,0L20.9,38.2c-0.5-0.5-1.2-1.2-1.7-1.7L8.4,25.7c-0.5-0.5-0.5-1.2,0-1.7l2.3-2.3\n                        c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,1.2-0.5,1.7,0l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,0.5,1.2,0,1.7\n                        L37.4,45c-0.5,0.5-1.2,1.2-1.7,1.7L33.4,49z\"/>\n                </g>\n              </svg>\n            </div>\n                        \n            <div (click)=\"showYearDiv()\" class=\"datepicker__calendar__nav__header__inner__year pointer\">\n                <span>{{ currentYear }}</span>\n            </div>\n            \n            <div class=\"datepicker__calendar__nav__arrow\" (click)=\"changeYear('right')\" >\n              <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n                <g>\n                  <path d=\"M8.4,7.1c-0.5,0.5-0.5,1.2,0,1.7l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,1.2,0.5,1.7,0l2.3-2.3\n                      c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,0.5-1.2,0-1.7L29,13.2c-0.5-0.5-1.2-1.2-1.7-1.7L16.5,0.8c-0.5-0.5-1.2-0.5-1.7,0\n                      l-2.3,2.3c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,7.1z\"/>\n                </g>\n                <g>\n                  <path d=\"M14.8,49c0.5,0.5,1.2,0.5,1.7,0l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7l10.8-10.8c0.5-0.5,0.5-1.2,0-1.7l-2.3-2.3\n                      c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-1.2-0.5-1.7,0L20.9,28.5c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,40.9c-0.5,0.5-0.5,1.2,0,1.7\n                      l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L14.8,49z\"/>\n                </g>\n              </svg>\n            </div>          \n            \n          </div>\n          \n          <div class=\"datepicker__calendar__content\">\n            <div class=\"grid\" [@calendarAnimation]=\"animate\">\n            <div class=\"col-1-4\" *ngFor=\"let month of monthsList\">\n                <div class=\"month\"\n                 [ngStyle]=\"{ 'background-color': getMonthBackgroundColor(month.value),\n                      'color':  isHoveredMonth(month.value) ? accentColor : getMonthFontColor(month.value) }\"\n                 (mouseenter)=\"hoveredMonth = month.value\"\n                 (mouseleave)=\"hoveredMonth = null\"\n                 (click)=\"selectMonth(month.value)\"><span>{{month.name}}</span></div>\n              </div>\n\n            </div>\n            <div class=\"datepicker__calendar__cancel\" (click)=\"onCancel()\">\n              Cancel\n            </div>\n          </div>\n          \n        </div>\n        \n        <div *ngIf=\"showYear\" class=\"datepicker__calendar__inner\">\n        \n          <div class=\"datepicker__calendar__nav\">\n            <div class=\"datepicker__calendar__nav__arrow\" (click)=\"changeYearList('left')\" >\n              <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n                <g>\n                  <path d=\"M39.7,7.1c0.5,0.5,0.5,1.2,0,1.7L29,19.6c-0.5,0.5-1.2,1.2-1.7,1.7L16.5,32.1c-0.5,0.5-1.2,0.5-1.7,0l-2.3-2.3\n                        c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-0.5-1.2,0-1.7l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7L31.7,0.8c0.5-0.5,1.2-0.5,1.7,0\n                        l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L39.7,7.1z\"/>\n                </g>\n                <g>\n                  <path d=\"M33.4,49c-0.5,0.5-1.2,0.5-1.7,0L20.9,38.2c-0.5-0.5-1.2-1.2-1.7-1.7L8.4,25.7c-0.5-0.5-0.5-1.2,0-1.7l2.3-2.3\n                        c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,1.2-0.5,1.7,0l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,0.5,1.2,0,1.7\n                        L37.4,45c-0.5,0.5-1.2,1.2-1.7,1.7L33.4,49z\"/>\n                </g>\n              </svg>\n            </div>\n            \n            <div class=\"datepicker__calendar__nav__header__inner__year\">\n                <span>{{ selectedYearRange }}</span>\n            </div>\n            \n            <div class=\"datepicker__calendar__nav__arrow\" (click)=\"changeYearList('right')\" >\n              <svg class=\"datepicker__calendar__nav__chevron\" x=\"0px\" y=\"0px\" viewBox=\"0 0 50 50\">\n                <g>\n                  <path d=\"M8.4,7.1c-0.5,0.5-0.5,1.2,0,1.7l10.8,10.8c0.5,0.5,1.2,1.2,1.7,1.7l10.8,10.8c0.5,0.5,1.2,0.5,1.7,0l2.3-2.3\n                      c0.5-0.5,1.2-1.2,1.7-1.7l2.3-2.3c0.5-0.5,0.5-1.2,0-1.7L29,13.2c-0.5-0.5-1.2-1.2-1.7-1.7L16.5,0.8c-0.5-0.5-1.2-0.5-1.7,0\n                      l-2.3,2.3c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,7.1z\"/>\n                </g>\n                <g>\n                  <path d=\"M14.8,49c0.5,0.5,1.2,0.5,1.7,0l10.8-10.8c0.5-0.5,1.2-1.2,1.7-1.7l10.8-10.8c0.5-0.5,0.5-1.2,0-1.7l-2.3-2.3\n                      c-0.5-0.5-1.2-1.2-1.7-1.7l-2.3-2.3c-0.5-0.5-1.2-0.5-1.7,0L20.9,28.5c-0.5,0.5-1.2,1.2-1.7,1.7L8.4,40.9c-0.5,0.5-0.5,1.2,0,1.7\n                      l2.3,2.3c0.5,0.5,1.2,1.2,1.7,1.7L14.8,49z\"/>\n                </g>\n              </svg>\n            </div>\n            \n          </div>\n          \n          <div class=\"datepicker__calendar__content\">\n            <div class=\"grid\" [@calendarAnimation]=\"animate\">\n              <div class=\"col-1-5\" *ngFor=\"let year of calendarYears\">\n                <div class=\"year\"\n                 [ngStyle]=\"{ 'background-color': getYearBackgroundColor(year),\n                      'color':  isHoveredYear(year) ? accentColor : getYearFontColor(year) }\"\n                 (mouseenter)=\"hoveredYear = year\"\n                 (mouseleave)=\"hoveredYear = null\"\n                 (click)=\"selectYear(year)\"><span>{{year}}</span></div>\n              </div>\n            </div>\n            <div class=\"datepicker__calendar__cancel\" (click)=\"onCancel()\">\n              Cancel\n            </div>\n          </div>\n          \n        </div>\n        \n      </div>\n    </div>\n    "
    }),
    __metadata("design:paramtypes", [core_1.Renderer, core_1.ElementRef])
], DatepickerComponent);
exports.DatepickerComponent = DatepickerComponent;
