import { ElementRef, EventEmitter, OnChanges, OnInit, Renderer, SimpleChange } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Calendar } from './calendar';
import { DateFormatFunction, ValidationResult } from './validation';
export declare class DatepickerComponent implements OnInit, OnChanges {
    private renderer;
    private elementRef;
    private dateVal;
    dateChange: EventEmitter<Date>;
    date: Date;
    disabled: boolean;
    accentColor: string;
    altInputStyle: boolean;
    dateFormat: string | DateFormatFunction;
    fontFamily: string;
    rangeStart: Date;
    rangeEnd: Date;
    placeholder: string;
    inputText: string;
    showCalendar: boolean;
    onSelect: EventEmitter<Date>;
    calendarDays: Array<number>;
    currentMonth: string;
    dayNames: Array<String>;
    hoveredDay: Date;
    hoveredYear: number;
    hoveredMonth: number;
    calendar: Calendar;
    currentMonthNumber: number;
    currentYear: number;
    months: Array<string>;
    animate: string;
    colors: {
        [id: string]: string;
    };
    clickListener: Function;
    yearControl: FormControl;
    showYear: boolean;
    showMonths: boolean;
    calendarYears: Array<number>;
    selectedYearRange: string;
    calendarYearRange: any;
    monthsList: Array<{
        name: string;
        value: number;
    }>;
    constructor(renderer: Renderer, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    /**
    * Closes the calendar and syncs visual components with selected or current date.
    * This way if a user opens the calendar with this month, scrolls to two months from now,
    * closes the calendar, then reopens it, it will open with the current month
    * or month associated with the selected date
    */
    closeCalendar(): void;
    /**
    * Sets the date values associated with the ui
    */
    private setCurrentValues(date);
    /**
    * Visually syncs calendar and input to selected date or current day
    */
    syncVisualsWithDate(): void;
    /**
    * Sets the currentMonth and creates new calendar days for the given month
    */
    setCurrentMonth(monthNumber: number): void;
    /**
    * Sets the currentYear and FormControl value associated with the year
    */
    setCurrentYear(year: number): void;
    /**
    * Sets the visible input text
    */
    setInputText(date: Date): void;
    /**
     * Show or hide the list of years
     */
    showYearDiv(): void;
    /**
     * Sets the currentMonth and creates new calendar days for the given month
     */
    selectMonth(monthId: number): void;
    /**
     * Show or hide the list of Months
     */
    showMonthsDiv(): void;
    /**
    * Sets the date values associated with the calendar.
    * Triggers animation if the month changes
    */
    onArrowClick(direction: string): void;
    /**
    * Sets the date values associated with the calendar.
    * Triggers animation if the year changes
    */
    changeYear(direction: string): void;
    /**
    * Closes the calendar when the cancel button is clicked
    */
    onCancel(): void;
    /**
    * Toggles the calendar when the date input is clicked
    */
    onInputClick(): void;
    /**
    * Returns the font color for a day
    */
    onSelectDay(day: Date): void;
    /**
    * Sets the current year and current month if the year from
    * yearControl is valid
    */
    onYearSubmit(): void;
    /**
     * Update calendar on year selection
     */
    selectYear(year: number): void;
    /**
     * Sets the date values associated with the calendar.
     * Triggers animation if the year changes
     */
    changeYearList(direction: string): void;
    /**
    * Closes the calendar if a click is not within the datepicker component
    */
    handleGlobalClick(event: MouseEvent): void;
    /**
    * Returns the background color for a day
    */
    getDayBackgroundColor(day: Date): string;
    /**
     * Returns the background color for a year
     */
    getYearBackgroundColor(year: number): string;
    /**
     * Returns the background color for a month
     */
    getMonthBackgroundColor(month: number): string;
    /**
    * Returns the font color for a day
    */
    getDayFontColor(day: Date): string;
    /**
    * Returns the day is between rangeStart and rangeEnd
    */
    isSelectableDate(day: Date): boolean;
    /**
     * Returns the font color for a year
     */
    getYearFontColor(year: number): string;
    /**
     * Returns the font color for a month
     */
    getMonthFontColor(month: number): string;
    /**
    * Returns whether a day is the chosen day
    */
    isChosenDay(day: Date): boolean;
    /**
    * Returns whether a day is the current calendar day
    */
    isCurrentDay(day: Date): boolean;
    /**
    * Returns whether a day is the day currently being hovered
    */
    isHoveredDay(day: Date): boolean;
    /**
     * Returns whether a year is the year currently being hovered
     */
    isHoveredYear(year: number): boolean;
    /**
     * Returns whether a year is the year currently being hovered
     */
    isHoveredMonth(month: number): boolean;
    /**
    * Triggers an animation and resets to initial state after the duration of the animation
    */
    triggerAnimation(direction: string): void;
    /**
    * Validates that a value is within the 'rangeStart' and/or 'rangeEnd' if specified
    */
    inRangeValidator(control: FormControl): ValidationResult;
    /**
    * Validates that a value is a number greater than or equal to 1970
    */
    yearValidator(control: FormControl): ValidationResult;
}
